//
// anyRemote java client
// a bluetooth remote for your PC.
//
// Copyright (C) 2006-2012 Mikhail Fedotov <anyremote@mail.ru>
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 
//
 
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.util.Vector;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Form;
import javax.microedition.lcdui.Image;
import javax.microedition.lcdui.List;
import javax.microedition.lcdui.TextField;
import javax.microedition.midlet.*;
import javax.microedition.rms.RecordStore;
import javax.microedition.rms.RecordStoreException;
import javax.microedition.rms.InvalidRecordIDException;

public class Controller extends MIDlet implements CommandListener, Runnable  { 

	static final int  DISCONNECTED = 0;
	static final int  CONNECTED    = 1;
	
	static final int  ANY_FORM     = 0;
        static final int  SEARCH_FORM  = 1;
        static final int  CONTROL_FORM = 2;
        static final int  FMGR_FORM    = 3;
        static final int  TEXT_FORM    = 4;
        static final int  LIST_FORM    = 5;
        static final int  EDIT_FORM    = 6;
        static final int  WMAN_FORM    = 7;

	Form        editfieldForm;
	List        searchForm;
	CanvasScreen cScreen;
	SplashScreen splash;
	ARProtocol  protocol;
	String      platform;
	int         alphaBlending;

        BtComm      btComm;
        
	// Parameters (Set(parameter, ...))
	boolean     debug;		// send debug output to anyRemote
	boolean     fullRepaint;	// flush only fullscreen
	boolean     lazyRepaint;	// repaint only by Set(repaint)
	boolean     seFix;		// fix SE-K750 flushGraphics(,,?,?) issue
	boolean     siemensFix; 	// fix Siemens-S65 repaint issue
	boolean     nokiaFixRepaint;	// fix Nokia 6111 (possibly all series 40) non-repaint issue
	boolean     nokiaFixRepaint2;	// fix Nokia E61 non-repaint issue
	boolean     motoFixMenu;	// fix Motorola RIZR Z3 non-paint lcdui.Command over Canvas issue
        int         readMethod;
        
        Displayable currDisp;
	int         currForm;
 	int         prevForm;
        int         status;
	int         callsNum;
	Vector      menuCommands;
        
        // editfieldForm stuff
	Command     ok;
	Command     back;
	TextField   address;
        boolean     internal;
	
        // SearchForm stuff
	Command     exitCommand;
	Command     connectCommand;
	Command     autoConnect;
	Command     enterSockAddr;
	Command     enterBTAddr;
	//Command     enterL2Addr;
	Command     cleanAddress;
	Command     searchCommand;
	
        Vector      serviceListURL;
        
	Display     display;

        String      mPlatform;
	
	public Controller() {
		menuCommands    = new Vector();
                             
                currForm        = ANY_FORM;
                status          = DISCONNECTED;
                //redundant init
                //currDisp 	= null;
		//callsNum        = 0;

		//lazyRepaint	= false;
		//fullRepaint     = false;
                
                //btComm          = null;
                //mPlatform       = null;
                
	}

	public void run() {
        
        	while(!splash.splashIsShown) {
            		Thread.yield();
        	}
		display = Display.getDisplay(this);
		
		String nup = null;
        	
		if (callsNum==0) {
                
		        alphaBlending = display.numAlphaLevels();
						
			try {   // just a dirty workaround
				mPlatform = System.getProperty("microedition"+".platform");
			} catch(Exception x) {}
			
			if(mPlatform == null) { 	// Motorola-V500
				mPlatform = "";
			}
			
			// hardware-specific tricks
			siemensFix 	= mPlatform.equals("S65");	
			seFix 		= (mPlatform.indexOf("SonyEricsson") >= 0);
			nokiaFixRepaint = (mPlatform.indexOf("Nokia") >= 0);
			nokiaFixRepaint2 = (mPlatform.indexOf("NokiaE") >= 0 || mPlatform.indexOf("NokiaN") >= 0);
			fullRepaint 	 = true; //(mPlatform.indexOf("SAMSUNG") >= 0);	 // for now do this for all Samsungs

			if (mPlatform.indexOf("SAMSUNG") >= 0) {
				readMethod = 1;                                                     
			}
			
			//String isMoto = System.getProperty("com.motorola.IMEI"); RiZR Z3 did not have it
			motoFixMenu   = (mPlatform.equals("j2me"));

			// On JBed/WinMobile this cause a crash
			// Actually this trick does not helps since Jbed somehow optimize midlet
			// during installation. As a result it needs to supply special
			// JSR-82-stripped version of this file
			try {
				if (Class.forName("javax.bluetooth.UUID") != null) {
                        		btComm = new BtComm();
                        		btComm.setController(this);
				}
			} catch(Exception x) { }
			
			callsNum++;
                        splash.load = 10;
                        splash.repaint();
                        
			protocol = new ARProtocol(this);

                 	// EditForm stuff
                 	editfieldForm = new Form("");
 			editfieldForm.setCommandListener(this);
		
                	address = new TextField("", "", 100, TextField.ANY);
 			editfieldForm.append(address);
                	
                	back = new Command("Back", Command.EXIT, 1);
                	ok   = new Command("Ok",   Command.ITEM, 1);
                
                	internal = true;
                	// EditForm stuff

                        splash.load = 30;
                        splash.repaint();
                        
                	// SearchForm stuff
			searchForm = new List("anyRemote", List.IMPLICIT);
			searchForm.setCommandListener(this);
                        
			serviceListURL  = new Vector();
		
                        splash.load = 50;
                        splash.repaint();

			connectCommand = new Command("Connect",       Command.ITEM, 2);
			exitCommand    = new Command("Exit",          Command.EXIT, 1);
			searchCommand  = new Command("Search ",       Command.SCREEN, 1);
			//cancelSearch = new Command("Cancel Search ", Command.SCREEN, 1);
			enterSockAddr  = new Command("Enter IP address", Command.SCREEN, 1);
			enterBTAddr    = new Command("Enter BT address", Command.SCREEN, 1);
			//enterL2Addr  = new Command("Enter L2CAP address", Command.SCREEN, 1);
			cleanAddress   = new Command("Clean address", Command.SCREEN, 1);
			autoConnect    = new Command("AutoConnect",       Command.SCREEN, 1);

                        splash.load = 80;
                        splash.repaint();
                        
			cScreen = new CanvasScreen(this);
                        
                        splash.load = 100;
                        splash.repaint();
                        
			cScreen.init();
			
                        
			nup = getAutoConnect();
			
                        splash.isInitialized = true;
		} else {
			protocol.queueCommand("(EndCall)");
		}
		
		                
 		if (status == Controller.CONNECTED) {
                	showScr(CONTROL_FORM);
                } else {
			handleSettings("\n\n\n",false);  // will add already used devices to the list
			if (nup == null) {
				showScr(SEARCH_FORM);
                         	setSearchFormTitle("Unconnected");
			} else {
				connectTo(nup);
			}
                }		
	}

	public void addCommPorts() {
	
		// add all available commports
		String comms = System.getProperty("microedition.commports");
                int    max = 0;
		if (comms != null) {
			max = comms.length();
                
			//System.out.println("commports "+comms);
			int idx = 0;
                	while (idx < max) {
				int idx2 = comms.indexOf(",",idx);
				if (idx2 > 0) {
					//System.out.println("commports "+comms.substring(idx,idx2));
					String cport = "comm:" + comms.substring(idx,idx2);
					addInfo(cport+"\n"+cport+"\n");
					
				} else if (idx2 == 0) {
					break;
				} else {
					String cport = "comm:" + comms.substring(idx);
					addInfo(cport+"\n"+cport+"\n");
					break;
				}
				idx = idx2+1;
			}
		}
	}
		
	void addInfo(String name_url_pass) {
	        //showAlert("addInfo "+name_url_pass);
	        //System.out.println("addInfo "+name_url_pass);
		for (int n=0; n<serviceListURL.size(); ++n) {
 			if (name_url_pass.startsWith((String) serviceListURL.elementAt(n))) {
				//System.out.println("addInfo not new");
				return;			
			}
		}
                
		serviceListURL.addElement(name_url_pass);
		
		String name = name_url_pass;
		
		int p = name_url_pass.indexOf('\n');		
		if (p > 0) {
			name = name_url_pass.substring(0, p);
		}
		
		searchForm.append(name, null);
	}

	public void cleanMenu(Displayable d) {
        	//System.out.println("cleanMenu ");
		if (d == null) {
                	return;
                }
		synchronized (cScreen.drawMutex) {
 			for (int idx=menuCommands.size()-1;idx>=0;idx--) {
				d.removeCommand((Command)menuCommands.elementAt(idx));
			}
		}
                menuCommands.removeAllElements();
        }

	public void addToMenu(Displayable d) {
         	//System.out.println("addToMenu");
	       	if (d == null) {
                	return;
                }
		synchronized (cScreen.drawMutex) {
			for (int idx=0;idx<menuCommands.size();idx++) {
 				d.addCommand((Command)menuCommands.elementAt(idx));
			}
		}
        }

	public void callMenuUpdate() {
        	synchronized (cScreen.drawMutex) {
			if (currDisp == editfieldForm) {
        			updateMenuEF();
        		} else if (currDisp == searchForm) {
        			updateMenuSF();
        		} else {
        			cScreen.updateMenu(); 
        		}
                }
        }

        public void repaintCanvas() {
        	//System.out.println("repaintCanvas");
        	if (currDisp == cScreen) {
			synchronized (cScreen.drawMutex) {
				cScreen.flushGraphics();
			}
                
        	}	
	}

        public void getPass() {
	        //showAlert("called getPass");
		/*if (currForm == SEARCH_FORM) {
		        // trick  Nokia-6288 
			showScr(CONTROL_FORM);
		}*/
        	setupEField("Password", "Enter password:", "", true);
		prevForm = currForm;
                showScr(EDIT_FORM);
	}

        public void showScr(int which) {
                //System.out.println("showScr " + which);
                //showAlert("showScr "+which);
                boolean needMUpdate = false;
                if (currForm != which) {
                	cleanMenu(currDisp);
			
			cScreen.stopTicker();
			
                        needMUpdate = true;
                }
                currForm = which;
                
		switch (which) {
                	case SEARCH_FORM:
                        	Display.getDisplay(this).setCurrent(searchForm);
                                currDisp = searchForm;
                         	break;
                 	case EDIT_FORM:
                        	Display.getDisplay(this).setCurrent(editfieldForm);
                		currDisp = editfieldForm;
                         	break;
                	case FMGR_FORM:
 				Display.getDisplay(this).setCurrent(cScreen);
				cScreen.show(CanvasScreen.FILEMGR_SCREEN);
                        	currDisp = cScreen;
                        	break;
                 	case TEXT_FORM:
  				Display.getDisplay(this).setCurrent(cScreen);
				cScreen.show(CanvasScreen.TEXT_SCREEN);
                        	currDisp = cScreen;
                        	break;
                 	case LIST_FORM:
                        	Display.getDisplay(this).setCurrent(cScreen);
				cScreen.show(CanvasScreen.LIST_SCREEN);
                        	currDisp = cScreen;
                        	break;
                 	case WMAN_FORM:
                        	Display.getDisplay(this).setCurrent(cScreen);
				cScreen.show(CanvasScreen.WMAN_SCREEN);
                        	currDisp = cScreen;
                        	break;
                        case CONTROL_FORM:
                        default:
  				Display.getDisplay(this).setCurrent(cScreen);
				cScreen.show(CanvasScreen.CONTROL_SCREEN);
                        	currDisp = cScreen;
                         	break;
              	}
                if (needMUpdate) {	// add screen-specific menu items
			callMenuUpdate();
                        addToMenu(currDisp);
                }
         	if (currDisp == searchForm) {
                	synchronized (cScreen.drawMutex) {
               			searchForm.setSelectCommand(connectCommand);
        		}
                }
        }
	
        //public boolean isBtOn() {
	//	return  (btComm == null ? true : btComm.isBtOn());
	//}
	
        public void showAlert(String data) {
		try {
 			if (debug) {
				protocol.queueCommand("_DEBUG_(" + data + ")");
			}
		} catch (Exception e) { }
        }

	public void showAlertAsTitle(String data) {
		try {
			cScreen.cf.setInfo(data);	
		} catch (Exception e) {
			// Umm...
		}
	}

	private int parseKey(String key) {
         	try {
                	return Integer.parseInt(key);
	        } catch (Exception e) { 
                	return -9999;
                }
        }

	public void setParam(Vector vR) {
        
        	for (int idx=1;idx<vR.size();idx+=2) {
        
        		String param = (String) vR.elementAt(idx);
        		String value = (String) vR.elementAt(idx+1);
        
			//System.out.println("setParam "+param+" "+value);
 			String comms = System.getProperty("microedition.commports");
			
			if (param.startsWith("debug")) {
				if (value.startsWith("on")) {
					debug = true;
					showAlert("MIDlet-Version " + getAppProperty("MIDlet-Version"));
					showAlert("microedition.platform " + mPlatform);
					showAlert("microedition.commports " + comms);
					showAlert("Alpha levels: " + display.numAlphaLevels());
					showAlert("Total memory " + Runtime.getRuntime().totalMemory());
					showAlert("Free memory " + Runtime.getRuntime().freeMemory());
				} else if (value.startsWith("off")) {
					debug = false;
                        	}
			} else if (param.startsWith("lazy_repaint")) {
				if (value.startsWith("on")) {
					lazyRepaint = true;
				} else if  (value.startsWith("off")) {
					lazyRepaint = false;
                        	}
			} else if (param.startsWith("full_repaint")) {
				if (value.startsWith("on")) {
					fullRepaint = true;
				} else if  (value.startsWith("off")) {
					fullRepaint = false;
                        	}
			} else if (param.startsWith("fix_siemens")) {
				if (value.startsWith("on")) {
					siemensFix = true;
				} else if  (value.startsWith("off")) {
					siemensFix = false;
                        	} else {	// auto
					siemensFix = mPlatform.equals("S65");	
                        	}
			} else if (param.startsWith("fix_se")) {
				if (value.startsWith("on")) {
					seFix = true;
				} else if  (value.startsWith("off")) {
					seFix = false;
                        	} else {	// auto
					seFix = (mPlatform.indexOf("SonyEricsson") >= 0);	
                        	}
                                if (currForm == CONTROL_FORM) {
                                	cleanMenu(currDisp);
					callMenuUpdate();
                        		addToMenu(currDisp);
                                }
			} else if (param.startsWith("fix_joystick")) {
				if (value.startsWith("auto") || value.startsWith("on")) {
					cScreen.cf.joystickFix     = true;
	        			cScreen.cf.joystickUp      = -1;
	        			cScreen.cf.joystickDown    = -2;
	        			cScreen.cf.joystickLeft    = -3;
	        			cScreen.cf.joystickRight   = -4;
	        			cScreen.cf.joystickPush    = -5;
                                } else {
					cScreen.cf.joystickFix     = false;
	        			cScreen.cf.joystickUp      = -99999;
	        			cScreen.cf.joystickDown    = -99999;
	        			cScreen.cf.joystickLeft    = -99999;
	        			cScreen.cf.joystickRight   = -99999;
	        			cScreen.cf.joystickPush    = -99999;
                                }
			} else if (param.startsWith("joystick_up")) {
				cScreen.cf.joystickFix   = true;
                        	cScreen.cf.joystickUp    = parseKey(value);
			} else if (param.startsWith("joystick_down")) {
				cScreen.cf.joystickFix   = true;
                        	cScreen.cf.joystickDown  = parseKey(value);
			} else if (param.startsWith("joystick_left")) {
				cScreen.cf.joystickFix   = true;
                        	cScreen.cf.joystickLeft  = parseKey(value);
			} else if (param.startsWith("joystick_right")) {
				 cScreen.cf.joystickFix   = true;
                        	 cScreen.cf.joystickRight = parseKey(value);
			} else if (param.startsWith("joystick_push")) {
				cScreen.cf.joystickFix   = true;
                        	cScreen.cf.joystickPush  = parseKey(value);
			} else if (param.startsWith("fix_nokia_push")) {
				if (value.startsWith("on")) {
					cScreen.nokiaPushFix = true;
				} else if  (value.startsWith("off")) {
					cScreen.nokiaPushFix = false;
                        	} else {
					cScreen.nokiaPushFix = (mPlatform.indexOf("Nokia") >= 0 && 
					                        mPlatform.indexOf("NokiaE") < 0 &&        // exclude Series 60 (E60, E61 )
								mPlatform.indexOf("NokiaN") < 0);         // exclude Series 60 (N.. )
				}
			} else if (param.startsWith("fix_nokia40_repaint")) {
				if (value.startsWith("on")) {
					nokiaFixRepaint = true;
				} else if  (value.startsWith("off")) {
					nokiaFixRepaint = false;
                        	} else {
					nokiaFixRepaint = (mPlatform.indexOf("Nokia") >= 0);	
				}
			} else if (param.startsWith("fix_nokia60_repaint")) {
				if (value.startsWith("on")) {
					nokiaFixRepaint2 = true;
				} else if  (value.startsWith("off")) {
					nokiaFixRepaint2 = false;
                        	} else {
					nokiaFixRepaint2 = (mPlatform.indexOf("NokiaE") >= 0 || 
                                                            mPlatform.indexOf("NokiaN") >= 0);	
				}
			} else if (param.startsWith("fix_nokia_exit_btn")) {
				if (value.startsWith("on")) {
					cScreen.cf.exitButtonFix = true;
				} else if  (value.startsWith("off")) {
					cScreen.cf.exitButtonFix = false;
                        	} else {
					cScreen.cf.exitButtonFix = (mPlatform.indexOf("NokiaE61") >= 0);	
				}
                                
			} else if (param.startsWith("motorola_menu_fix")) {
				if (value.startsWith("on")) {
					motoFixMenu = true;
				} else if  (value.startsWith("off")) {
					motoFixMenu = false;
                        	} else {
					//String isMoto = System.getProperty("com.motorola.IMEI");
					motoFixMenu   = (mPlatform.equals("j2me") /*&& isMoto != null*/);
				}
			} else if (param.startsWith("use_encoding")) {
				if (value.startsWith("utf8")) {
					protocol.useUtf8 = true;
                        	} else {
					protocol.useUtf8 = false;
				}
			} else if (param.startsWith("ticker_step")) {
				cScreen.tickerStep = parseKey(value);
			} else if (param.startsWith("ticker_timeout")) {
				cScreen.tickerTmout = parseKey(value);
			} else if (param.startsWith("read_method")) {
				readMethod = parseKey(value)-1;	// 1,2,3
				if (readMethod<0 || readMethod>2) {
					readMethod = 0;
				}
			} else if (param.startsWith("icon_padding")) {
				cScreen.cf.split = parseKey(value);
				if (cScreen.cf.split < 0) {
					cScreen.cf.split = 0;
				}	
				if (cScreen.cf.split > cScreen.CW/7) {
					cScreen.cf.split = cScreen.CW/7;
				}	
				cScreen.cf.setIconXY();	
			}
               } 
	}

	private void addCustomMenu(Vector vR) {
        	for (int idx=2;idx<vR.size();idx++) {
                	String item = (String) vR.elementAt(idx);
			if (item.equals("")) {
				continue;
			}
			boolean newOne = true;
			for (int i=2;i<menuCommands.size();i++) {
				if (item.equals(((Command) menuCommands.elementAt(i)).getLabel())) {
					newOne = false;
				}
			}
                	if (newOne) {
                		menuCommands.addElement(new Command(item, Command.ITEM, 2));       	
                	}
                }
                addToMenu(currDisp);
	}
        
	public void setMenu(Vector vR) {
        	//System.out.println("Controller.setMenu()");

		String oper = (String) vR.elementAt(1);
 		if (oper.equals("add")) {
                	addCustomMenu(vR);
		} else if (oper.equals("replace")) {
                	cleanMenu(currDisp);
                        callMenuUpdate();	// add default items
                 	addCustomMenu(vR);
		} else if  (oper.equals("clear")) {
                	cleanMenu(currDisp);
		} else {
               		return;
                }

		cScreen.stopTicker();   // fix issue in Mototorola RIZR Z3: menu is not updated
		showScr(currForm);	// force to repaint
	}
	
	public void exit() {
		display.setCurrent(null);
        	this.destroyApp(false);
		this.notifyDestroyed();
	}
	
	private void connectTo(String nup) {
		
		//System.out.println("connectTo "+nup);
		
		String n_u_p = (nup == null ? (String) serviceListURL.elementAt(searchForm.getSelectedIndex()) : nup);
               
	        handleSettings(n_u_p, false);   // will store data in RMS if new
		protocol.setConnectionURL(n_u_p);
	}

	public void arStatusChanged(int status) {
	        //System.out.println("arStatusChanged "+status);
		
		if (status == Controller.CONNECTED && (Display.getDisplay(this).getCurrent() == searchForm)) {
                	this.status = Controller.CONNECTED;
 			showScr(CONTROL_FORM);
		} else if (status == Controller.DISCONNECTED && (Display.getDisplay(this).getCurrent() != searchForm)) {
                	this.status = Controller.DISCONNECTED;
			if (currForm != ANY_FORM) {	// if not init+autoconnect
				showScr(SEARCH_FORM);
                        	setSearchFormTitle("Unconnected");
			}	
		}
	}
        
        /////////////////////////////////////////////////////////////
        //
        // Midlet-related stuff
        //
        
	public void startApp() {
        	splash = new SplashScreen(this);
                Thread splashTread = new Thread(splash);
                splashTread.start();
                
		//this.start();
        	Thread mainThread = new Thread(this);
        	mainThread.start();       
	}

	public void pauseApp() {
		protocol.queueCommand("(InCall)");
	}

	public void destroyApp(boolean unconditional) {
		//System.out.println("destroyApp");
                
		cScreen.stopTicker();
		//try {
		//	cScreen.ticker.join(); hangs up client - it never exit
		//} catch (InterruptedException e) { }
		
		protocol.closeConnection();
                
		if (protocol != null) {
                	protocol.destroy();
			protocol = null;
		}
	}
        
        /////////////////////////////////////////////////////////////
        //
        // Settings-related stuff
        //

 	void cleanSettings(int idx) {
                //System.out.println("cleanSettings"+idx); 	        			
		String n_u_p = (String) serviceListURL.elementAt(idx);
 		serviceListURL.removeElementAt(idx);
		
		handleSettings(n_u_p, true);	// remove from store
		
		searchForm.delete(idx);
		
                if (serviceListURL.size() == 0) {
			try {
	        		RecordStore.deleteRecordStore("Settings");
	        	} catch (Exception e) { }
		}
	}
        
 	void handleSettings(String name_url_pass, boolean deleteMode) {	// u == n == p == null if load

		RecordStore store = null;
		
 		try {
		        boolean isNew = true;
			boolean appendMode = (!(name_url_pass.equals("\n\n\n") || deleteMode));

			store = RecordStore.openRecordStore("Settings",true);
                        
                        int num = store.getNumRecords();
			//showAlert("handleSettings total #"+num);
			
			String name_url =  name_url_pass;
			int p = name_url_pass.lastIndexOf('\n');
			if (p > 0) {
				name_url =  name_url_pass.substring(0, p);
			}
                        int i=1;
			while( i < store.getNextRecordID()) {
 				
				try {
					String dNUP  = new String(store.getRecord(i));
								
					if (deleteMode || appendMode) {
						if (dNUP.startsWith(name_url)) {
					        	if (deleteMode) {
						        	//System.out.println("handleSettings delete #"+i);
								store.deleteRecord(i);
							} else {	// appendMode
								//System.out.println("handleSettings exists already #"+i);
								isNew = false;
							}
							break;
						}
					} else {
						//System.out.println("handleSettings add "+i);
				       		addInfo(dNUP);
                                	}
				} catch (InvalidRecordIDException e) {
				        //System.out.println("handleSettings InvalidRecordIDException -> "+store.getNextRecordID()+" "+i);
				}
				i++;
                        }

			if (isNew && appendMode) {
			         //showAlert("handleSettings() addRecord "+name_url_pass);
			 	 byte[] data = name_url_pass.getBytes();
			 	 store.addRecord(data, 0, data.length);
			}
		} catch (Exception e) {
                	showAlert("Exception in handleSettings() "+e.getMessage()+" "+e.toString());
			//System.out.println("Exception in handleSettings "+e.getMessage()+" "+e.toString());
		} finally {
			if (store != null) try {
				store.closeRecordStore();
			} catch (RecordStoreException e1) { }
		}
	}

        /////////////////////////////////////////////////////////////
        //
        // Auto-Connect stuff
        //

 	void cleanAutoConnect() {
                try {
	        	RecordStore.deleteRecordStore("AutoConnect");
	        } catch (Exception e) { }
	}
        
 	void setAutoConnect(String name_url_pass) {
	
		cleanAutoConnect();
		
		RecordStore store = null;
 		try {
			store = RecordStore.openRecordStore("AutoConnect",true);
                        
			byte[] data = name_url_pass.getBytes();
			store.addRecord(data, 0, data.length);
				 
		} catch (Exception e) {

		} finally {
			if (store != null) try {
				store.closeRecordStore();
			} catch (RecordStoreException e1) { }
		}
	}
	
 	String getAutoConnect() {
		
		RecordStore store = null;
		String name_url_pass = null;
		
 		try {
			store = RecordStore.openRecordStore("AutoConnect",true);
			if (store.getNumRecords() > 0) {
 				try {
					name_url_pass  = new String(store.getRecord(1));
				} catch (InvalidRecordIDException e) { }
                        }
		} catch (Exception e) {

		} finally {
			if (store != null) try {
				store.closeRecordStore();
			} catch (RecordStoreException e1) { }
		}
		return name_url_pass;
	}

        /////////////////////////////////////////////////////////////
        //
        // Edit form-related stuff
        //

	public void setupEField(String caption, String label, String initValue, boolean usedBySearch) {
        	internal = usedBySearch;
                synchronized (cScreen.drawMutex) {
                	editfieldForm.setTitle(caption);
                	address.setLabel(label);
                	address.setString(initValue);
                }
        }

	public void updateMenuEF() {
		menuCommands.addElement(back);
		menuCommands.addElement(ok);
        }
	
	
	public void commandAction(Command cmd, Displayable d) {
		if (cmd == exitCommand) {
			exit();
		} else if (cmd == connectCommand) {
		        cleanAutoConnect();
			if (searchForm.getSelectedIndex() >= 0) {
				connectTo(null);
			}
                        return;
		} else if (cmd == autoConnect) {
			if (searchForm.getSelectedIndex() >= 0) {
				setAutoConnect((String) serviceListURL.elementAt (searchForm.getSelectedIndex()));
				connectTo(null);
			}
                        return;
		} else if (cmd == searchCommand) {
			searchForm.deleteAll();
			serviceListURL.removeAllElements();

			if (btComm != null) {
				btComm.startSearch();
                        } else {
				addCommPorts();
			}
                        return;
		//} else if (cmd == cancelSearch) {
		//	if (btComm != null) {
		//		btComm.cancelSearch();
		//	}
                //        return;
		} else if (cmd == enterSockAddr) {
        		setupEField("Address to connect", "Enter address:", "socket://192.168.1.1:5000", true);
                	showScr(EDIT_FORM);
                        return;
		} else if (cmd == enterBTAddr) {
        		setupEField("Address to connect", "Enter address:", "btspp://0008F4163049:19", true);
                	showScr(EDIT_FORM);
                        return;
		/*} else if (cmd == enterL2Addr) {
        		setupEField("Address to connect", "Enter address:", "btl2cap://0008F4163049:5019", true);
                	showScr(EDIT_FORM);
                        return;
		*/
		} else if (cmd == cleanAddress) {
			if (searchForm.getSelectedIndex() >= 0) {
				cleanSettings(searchForm.getSelectedIndex());
			}
                        return;
                }
                
                if (internal) {
			if (cmd == ok) {
			        System.out.println ("commandAction ok with "+address);
				
			        if(address.getString().startsWith("btspp:")) {

					// Samsungs does allows BT address only in capital
					StringBuffer baddr = new StringBuffer("btspp://");
					
					baddr.append(address.getString().substring(8).replace('a','A').
					            replace('b','B').replace('c','C').replace('d','D').
						    replace('e','E').replace('f','F'));
					int i = 8;
					while (i<baddr.length()-3) {
						if (baddr.charAt(i) == ':') {
							baddr.deleteCharAt(i); 
						} else {
							i++;
						}
					}		       
					
					String addr = new String(baddr);	       
					 
                 			addInfo(addr+"\n"+addr+"\n");
                 			addInfo(addr+";auth\n"+addr+";authenticate=false\n");
                 			addInfo(addr+";noauth\n"+addr+";authenticate=true\n");
					
			        /*} else if(address.getString().startsWith("btl2cap:")) {

					// Samsungs does allows BT address only in capital
					StringBuffer baddr = new StringBuffer("btl2cap://");
					
					baddr.append(address.getString().substring(10).replace('a','A').
					            replace('b','B').replace('c','C').replace('d','D').
						    replace('e','E').replace('f','F'));
					int i = 10;
					while (i<baddr.length()-5) {
						if (baddr.charAt(i) == ':') {
							baddr.deleteCharAt(i); 
						} else {
							i++;
						}
					}		       
					
					String addr = new String(baddr);	       
					 
                 			addInfo(addr+"\n"+addr+"\n");
  				*/
				} else if(address.getString().startsWith("socket:")){	// IP
					addInfo(address.getString()+"\n"+address.getString()+"\n");
				} else {	// get password
					// add pass to the info
					
					String newConn = protocol.connectionNUP.substring(0,protocol.connectionNUP.lastIndexOf('\n')+1)+address.getString();
					
					handleSettings(protocol.connectionNUP, true);	// remove from store
					handleSettings(newConn,               false); 	// add to store
					protocol.queueCommand("_PASSWORD_(,"+address.getString()+")");
					showScr(prevForm);
					return;
				}
			} 
      			showScr(SEARCH_FORM);
                } else {    // called by server-side. Send message back
                     	protocol.queueCommand(cmd.getLabel() + "(0," + address.getString() + ")");
                }
	}
        
        /////////////////////////////////////////////////////////////
        //
        // RMS stuff
        //
       
        public void rmsClean() {
                //System.out.println("rmsClean");

		try {
	        	RecordStore.deleteRecordStore("icons16");
	        } catch (Exception e) { }
		try {
	        	RecordStore.deleteRecordStore("icons32");
	        } catch (Exception e) { }
		try {
	        	RecordStore.deleteRecordStore("icons48");
	        } catch (Exception e) { }
		try {
	        	RecordStore.deleteRecordStore("icons64");
	        } catch (Exception e) { }
		try {
	        	RecordStore.deleteRecordStore("icons128");
	        } catch (Exception e) { }
	}
        
	public boolean rmsSearch(String size, String name) {
		RecordStore rStore = null;
        	try {
            		rStore = RecordStore.openRecordStore("icons"+size, true);
			int i = rStore.getNumRecords();
			
			byte[] b = null;
			String imagename = null;
			
			for(int j = 1; j < i + 1; j++) {

                    		b = rStore.getRecord(j);
                   		ByteArrayInputStream  bin = new ByteArrayInputStream(b);
                    		DataInputStream       din = new DataInputStream(bin);
                    
                    		imagename = din.readUTF();
                    
                   		bin.reset();
                    		din.close();
                    		din = null;
				
				if (name.equals(imagename)) {
					return true;
				}
			}
	
        	} catch (Exception e) {
                	//System.out.println("rmsHandle Exception 1");
                	return false;
		} finally {
			if (rStore != null) try {
				rStore.closeRecordStore();
			} catch (Exception e1) { }
                }
		return false;
	}
	
        public Image rmsHandle(boolean save, int[] imgRgbData, int width, int height, String name) {
        	
                //System.out.println("rmsHandle save "+save);
                
                RecordStore rStore = null;
        	Image       image  = null;
        	try {
			String ww = "16";
			if (width == 32)  ww = "32";
			if (width == 48)  ww = "48";
			if (width == 64)  ww = "64";
			if (width == 128) ww = "128";
			
			//System.out.println("rmsHandle store is "+ww);
			
            		rStore = RecordStore.openRecordStore("icons"+ww, true);
			
			int i = rStore.getNumRecords();
			//System.out.println("rmsHandle number of records in store "+ww+" = " + i);

        		if (save) {
            			// Write image data to output stream (in order to get 
            			// the record bytes in needed form)
            			ByteArrayOutputStream baos = new ByteArrayOutputStream();
            			DataOutputStream dos = new DataOutputStream(baos);
            			dos.writeUTF(name);
            
            			for (int k = 0; k < imgRgbData.length; k++) {
					dos.writeInt(imgRgbData[k]);
            			}
            
            			// Open record store, create if it doesn't exist
            			rStore.addRecord(baos.toByteArray(), 0, baos.toByteArray().length);

				dos.close();
                   		dos = null;
                                
                                //System.out.println("rmsHandle Saved >"+name+"<");
			} else {

        			byte[] b = null;
                                String imagename = null;

                		boolean found = false;
                                
                                //System.out.println("rmsHandle number of records in store = " + i);
            
            			for(int j = 1; j < i + 1; j++) {
                
                    			b = rStore.getRecord(j);
                			if(b != null) {
                    
                    				ByteArrayInputStream  bin = new ByteArrayInputStream(b);
                    				DataInputStream       din = new DataInputStream(bin);
                    
                    				imagename = din.readUTF();
                                        	//System.out.println("Next: name is >" + imagename + "<");
                                        	if (name.equals(imagename)) {
                    					int remaining =  (b.length-imagename.getBytes().length-2)/4;
                                        		//System.out.println("found size="+remaining);
                    
                    					int[] rawdata = new int[remaining];
                    
                    					for(int k =0 ;k<rawdata.length ;k++) {
                        					rawdata[k] = din.readInt();
								//System.out.println("createRGBImage "+k+"="+rawdata[k]);
                    					}
                   				
                                                	//System.out.println("createRGBImage");
                    					image = Image.createRGBImage(rawdata, width, height, true); 
                                                	//System.out.println("createRGBImage OK");
                                                	found = true;
                                        	}
                    
                   				bin.reset();
                    				din.close();
                    				din = null;

                                        	if (found) {
                                        		break;
                                        	}
                			}
            			}
                        }
  
        	} catch (Exception e) {
                	//System.out.println("rmsHandle Exception 1");
                	return null;
		} finally {
			if (rStore != null) try {
				rStore.closeRecordStore();
			} catch (Exception e1) { }
                }

        	return image;
	} 
        
	/////////////////////////////////////////////////////////////
        //
        // Search form stuff
        //
	
        public void setSearchFormTitle(String msg) {
		synchronized (cScreen.drawMutex) {
			searchForm.setTitle(msg);			
		}
        }

	public void updateMenuSF() {
        
		menuCommands.addElement(exitCommand);
        	menuCommands.addElement(connectCommand);
        	menuCommands.addElement(autoConnect);
		if (btComm != null) {
			menuCommands.addElement(searchCommand);
		}
		menuCommands.addElement(enterSockAddr);
		if (btComm != null) {
			menuCommands.addElement(enterBTAddr);
			//menuCommands.addElement(enterL2Addr);
		}
		menuCommands.addElement(cleanAddress);
        }

}
